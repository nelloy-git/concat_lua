{
    "Class.new":{
        "prefix": "class",
        "body": [
            "--=========",
            "-- Include",
            "--=========",
            "",
            "--region Include",
            "local lib_modname = Lib.current().modname",
            "local depencies = Lib.current().depencies",
            "--endregion",
            "",
            "---@type UtilsLib",
            "local UtilsLib = require(Lib.Utils)",
            "local checkType = UtilsLib.Functions.checkType",
            "",
            "--=======",
            "-- Class",
            "--=======",
            "",
            "local ${1:className} = Class.new('${1:className}')",
            "--region Class",
            "---@class ${1:className}",
            "local public = ${1:className}.public",
            "---@class ${1:className}Class",
            "local static = ${1:className}.static",
            "---@type ${1:className}Class",
            "local override = ${1:className}.override",
            "local private = {}",
            "--endregion",
            "",
            "--=========",
            "-- Static",
            "--=========",
            "",
            "---@param child_instance ${1:className} | nil",
            "---@return ${1:className}",
            "function override.new(child_instance)",
            "    if child_instance then",
            "        checkType(child_instance, ${1:className}, 'child_instance')",
            "    end",
            "",
            "    local instance = child_instance or Class.allocate(${1:className})",
            "    private.newData(instance)",
            "",
            "    return instance",
            "end",
            "",
            "--========",
            "-- Public",
            "--========",
            "",
            "",
            "",
            "--=========",
            "-- Private",
            "--=========",
            "",
            "private.data = setmetatable({}, {__mode = 'k'})",
            "",
            "---@param self ${1:className}",
            "function private.newData(self)",
            "    local priv = {",
            "    }",
            "    private.data[self] = priv",
            "end",
            "",
            "return static",
        ]
    },

    "PrivateData":{
        "prefix": "local priv",
        "body": [
            "local priv = private.data[self]"
        ]
    },
}