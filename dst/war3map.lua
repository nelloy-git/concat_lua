  __require_data = {loaded = {}, module = {}, result = {}}
  function require(name)
    if (not __require_data.loaded[name]) then
      __require_data.result[name] = __require_data.module[name]()
      __require_data.loaded[name] = true
    end
    return __require_data.result[name]
  end
__require_data.module["ability.abilityField"] = function()
    local AbilityField = {Integer = {ABILITY_IF_BUTTON_POSITION_NORMAL_X = true, ABILITY_IF_BUTTON_POSITION_NORMAL_Y = true, ABILITY_IF_BUTTON_POSITION_ACTIVATED_X = true, ABILITY_IF_BUTTON_POSITION_ACTIVATED_Y = true, ABILITY_IF_BUTTON_POSITION_RESEARCH_X = true, ABILITY_IF_BUTTON_POSITION_RESEARCH_Y = true, ABILITY_IF_MISSILE_SPEED = true, ABILITY_IF_TARGET_ATTACHMENTS = true, ABILITY_IF_CASTER_ATTACHMENTS = true, ABILITY_IF_PRIORITY = true, ABILITY_IF_LEVELS = true, ABILITY_IF_REQUIRED_LEVEL = true, ABILITY_IF_LEVEL_SKIP_REQUIREMENT = true}, Real = {ABILITY_RF_ARF_MISSILE_ARC = true}, Boolean = {ABILITY_BF_HERO_ABILITY = true, ABILITY_BF_ITEM_ABILITY = true, ABILITY_BF_CHECK_DEPENDENCIES = true}, String = {ABILITY_SF_NAME = true, ABILITY_SF_ICON_ACTIVATED = true, ABILITY_SF_ICON_RESEARCH = true, ABILITY_SF_EFFECT_SOUND = true, ABILITY_SF_EFFECT_SOUND_LOOPING = true}, IntegerLevel = {ABILITY_ILF_MANA_COST = true, ABILITY_ILF_NUMBER_OF_WAVES = true, ABILITY_ILF_NUMBER_OF_SHARDS = true, ABILITY_ILF_NUMBER_OF_UNITS_TELEPORTED = true, ABILITY_ILF_SUMMONED_UNIT_COUNT_HWE2 = true, ABILITY_ILF_NUMBER_OF_IMAGES = true, ABILITY_ILF_NUMBER_OF_CORPSES_RAISED_UAN1 = true, ABILITY_ILF_MORPHING_FLAGS = true, ABILITY_ILF_STRENGTH_BONUS_NRG5 = true, ABILITY_ILF_DEFENSE_BONUS_NRG6 = true, ABILITY_ILF_NUMBER_OF_TARGETS_HIT = true, ABILITY_ILF_DETECTION_TYPE_OFS1 = true, ABILITY_ILF_NUMBER_OF_SUMMONED_UNITS_OSF2 = true, ABILITY_ILF_NUMBER_OF_SUMMONED_UNITS_EFN1 = true, ABILITY_ILF_NUMBER_OF_CORPSES_RAISED_HRE1 = true, ABILITY_ILF_STACK_FLAGS = true, ABILITY_ILF_MINIMUM_NUMBER_OF_UNITS = true, ABILITY_ILF_MAXIMUM_NUMBER_OF_UNITS_NDP3 = true, ABILITY_ILF_NUMBER_OF_UNITS_CREATED_NRC2 = true, ABILITY_ILF_SHIELD_LIFE = true, ABILITY_ILF_MANA_LOSS_AMS4 = true, ABILITY_ILF_GOLD_PER_INTERVAL_BGM1 = true, ABILITY_ILF_MAX_NUMBER_OF_MINERS = true, ABILITY_ILF_CARGO_CAPACITY = true, ABILITY_ILF_MAXIMUM_CREEP_LEVEL_DEV3 = true, ABILITY_ILF_MAX_CREEP_LEVEL_DEV1 = true, ABILITY_ILF_GOLD_PER_INTERVAL_EGM1 = true, ABILITY_ILF_DEFENSE_REDUCTION = true, ABILITY_ILF_DETECTION_TYPE_FLA1 = true, ABILITY_ILF_FLARE_COUNT = true, ABILITY_ILF_MAX_GOLD = true, ABILITY_ILF_MINING_CAPACITY = true, ABILITY_ILF_MAXIMUM_NUMBER_OF_CORPSES_GYD1 = true, ABILITY_ILF_DAMAGE_TO_TREE = true, ABILITY_ILF_LUMBER_CAPACITY = true, ABILITY_ILF_GOLD_CAPACITY = true, ABILITY_ILF_DEFENSE_INCREASE_INF2 = true, ABILITY_ILF_INTERACTION_TYPE = true, ABILITY_ILF_GOLD_COST_NDT1 = true, ABILITY_ILF_LUMBER_COST_NDT2 = true, ABILITY_ILF_DETECTION_TYPE_NDT3 = true, ABILITY_ILF_STACKING_TYPE_POI4 = true, ABILITY_ILF_STACKING_TYPE_POA5 = true, ABILITY_ILF_MAXIMUM_CREEP_LEVEL_PLY1 = true, ABILITY_ILF_MAXIMUM_CREEP_LEVEL_POS1 = true, ABILITY_ILF_MOVEMENT_UPDATE_FREQUENCY_PRG1 = true, ABILITY_ILF_ATTACK_UPDATE_FREQUENCY_PRG2 = true, ABILITY_ILF_MANA_LOSS_PRG6 = true, ABILITY_ILF_UNITS_SUMMONED_TYPE_ONE = true, ABILITY_ILF_UNITS_SUMMONED_TYPE_TWO = true, ABILITY_ILF_MAX_UNITS_SUMMONED = true, ABILITY_ILF_ALLOW_WHEN_FULL_REJ3 = true, ABILITY_ILF_MAXIMUM_UNITS_CHARGED_TO_CASTER = true, ABILITY_ILF_MAXIMUM_UNITS_AFFECTED = true, ABILITY_ILF_DEFENSE_INCREASE_ROA2 = true, ABILITY_ILF_MAX_UNITS_ROA7 = true, ABILITY_ILF_ROOTED_WEAPONS = true, ABILITY_ILF_UPROOTED_WEAPONS = true, ABILITY_ILF_UPROOTED_DEFENSE_TYPE = true, ABILITY_ILF_ACCUMULATION_STEP = true, ABILITY_ILF_NUMBER_OF_OWLS = true, ABILITY_ILF_STACKING_TYPE_SPO4 = true, ABILITY_ILF_NUMBER_OF_UNITS = true, ABILITY_ILF_SPIDER_CAPACITY = true, ABILITY_ILF_INTERVALS_BEFORE_CHANGING_TREES = true, ABILITY_ILF_AGILITY_BONUS = true, ABILITY_ILF_INTELLIGENCE_BONUS = true, ABILITY_ILF_STRENGTH_BONUS_ISTR = true, ABILITY_ILF_ATTACK_BONUS = true, ABILITY_ILF_DEFENSE_BONUS_IDEF = true, ABILITY_ILF_SUMMON_1_AMOUNT = true, ABILITY_ILF_SUMMON_2_AMOUNT = true, ABILITY_ILF_EXPERIENCE_GAINED = true, ABILITY_ILF_HIT_POINTS_GAINED_IHPG = true, ABILITY_ILF_MANA_POINTS_GAINED_IMPG = true, ABILITY_ILF_HIT_POINTS_GAINED_IHP2 = true, ABILITY_ILF_MANA_POINTS_GAINED_IMP2 = true, ABILITY_ILF_DAMAGE_BONUS_DICE = true, ABILITY_ILF_ARMOR_PENALTY_IARP = true, ABILITY_ILF_ENABLED_ATTACK_INDEX_IOB5 = true, ABILITY_ILF_LEVELS_GAINED = true, ABILITY_ILF_MAX_LIFE_GAINED = true, ABILITY_ILF_MAX_MANA_GAINED = true, ABILITY_ILF_GOLD_GIVEN = true, ABILITY_ILF_LUMBER_GIVEN = true, ABILITY_ILF_DETECTION_TYPE_IFA1 = true, ABILITY_ILF_MAXIMUM_CREEP_LEVEL_ICRE = true, ABILITY_ILF_MOVEMENT_SPEED_BONUS = true, ABILITY_ILF_HIT_POINTS_REGENERATED_PER_SECOND = true, ABILITY_ILF_SIGHT_RANGE_BONUS = true, ABILITY_ILF_DAMAGE_PER_DURATION = true, ABILITY_ILF_MANA_USED_PER_SECOND = true, ABILITY_ILF_EXTRA_MANA_REQUIRED = true, ABILITY_ILF_DETECTION_RADIUS_IDET = true, ABILITY_ILF_MANA_LOSS_PER_UNIT_IDIM = true, ABILITY_ILF_DAMAGE_TO_SUMMONED_UNITS_IDID = true, ABILITY_ILF_MAXIMUM_NUMBER_OF_UNITS_IREC = true, ABILITY_ILF_DELAY_AFTER_DEATH_SECONDS = true, ABILITY_ILF_RESTORED_LIFE = true, ABILITY_ILF_RESTORED_MANA__1_FOR_CURRENT = true, ABILITY_ILF_HIT_POINTS_RESTORED = true, ABILITY_ILF_MANA_POINTS_RESTORED = true, ABILITY_ILF_MAXIMUM_NUMBER_OF_UNITS_ITPM = true, ABILITY_ILF_NUMBER_OF_CORPSES_RAISED_CAD1 = true, ABILITY_ILF_TERRAIN_DEFORMATION_DURATION_MS = true, ABILITY_ILF_MAXIMUM_UNITS = true, ABILITY_ILF_DETECTION_TYPE_DET1 = true, ABILITY_ILF_GOLD_COST_PER_STRUCTURE = true, ABILITY_ILF_LUMBER_COST_PER_USE = true, ABILITY_ILF_DETECTION_TYPE_NSP3 = true, ABILITY_ILF_NUMBER_OF_SWARM_UNITS = true, ABILITY_ILF_MAX_SWARM_UNITS_PER_TARGET = true, ABILITY_ILF_NUMBER_OF_SUMMONED_UNITS_NBA2 = true, ABILITY_ILF_MAXIMUM_CREEP_LEVEL_NCH1 = true, ABILITY_ILF_ATTACKS_PREVENTED = true, ABILITY_ILF_MAXIMUM_NUMBER_OF_TARGETS_EFK3 = true, ABILITY_ILF_NUMBER_OF_SUMMONED_UNITS_ESV1 = true, ABILITY_ILF_MAXIMUM_NUMBER_OF_CORPSES_EXH1 = true, ABILITY_ILF_ITEM_CAPACITY = true, ABILITY_ILF_MAXIMUM_NUMBER_OF_TARGETS_SPL2 = true, ABILITY_ILF_ALLOW_WHEN_FULL_IRL3 = true, ABILITY_ILF_MAXIMUM_DISPELLED_UNITS = true, ABILITY_ILF_NUMBER_OF_LURES = true, ABILITY_ILF_NEW_TIME_OF_DAY_HOUR = true, ABILITY_ILF_NEW_TIME_OF_DAY_MINUTE = true, ABILITY_ILF_NUMBER_OF_UNITS_CREATED_MEC1 = true, ABILITY_ILF_MINIMUM_SPELLS = true, ABILITY_ILF_MAXIMUM_SPELLS = true, ABILITY_ILF_DISABLED_ATTACK_INDEX = true, ABILITY_ILF_ENABLED_ATTACK_INDEX_GRA4 = true, ABILITY_ILF_MAXIMUM_ATTACKS = true, ABILITY_ILF_BUILDING_TYPES_ALLOWED_NPR1 = true, ABILITY_ILF_BUILDING_TYPES_ALLOWED_NSA1 = true, ABILITY_ILF_ATTACK_MODIFICATION = true, ABILITY_ILF_SUMMONED_UNIT_COUNT_NPA5 = true, ABILITY_ILF_UPGRADE_LEVELS = true, ABILITY_ILF_NUMBER_OF_SUMMONED_UNITS_NDO2 = true, ABILITY_ILF_BEASTS_PER_SECOND = true, ABILITY_ILF_TARGET_TYPE = true, ABILITY_ILF_OPTIONS = true, ABILITY_ILF_ARMOR_PENALTY_NAB3 = true, ABILITY_ILF_WAVE_COUNT_NHS6 = true, ABILITY_ILF_MAX_CREEP_LEVEL_NTM3 = true, ABILITY_ILF_MISSILE_COUNT = true, ABILITY_ILF_SPLIT_ATTACK_COUNT = true, ABILITY_ILF_GENERATION_COUNT = true, ABILITY_ILF_ROCK_RING_COUNT = true, ABILITY_ILF_WAVE_COUNT_NVC2 = true, ABILITY_ILF_PREFER_HOSTILES_TAU1 = true, ABILITY_ILF_PREFER_FRIENDLIES_TAU2 = true, ABILITY_ILF_MAX_UNITS_TAU3 = true, ABILITY_ILF_NUMBER_OF_PULSES = true, ABILITY_ILF_SUMMONED_UNIT_TYPE_HWE1 = true, ABILITY_ILF_SUMMONED_UNIT_UIN4 = true, ABILITY_ILF_SUMMONED_UNIT_OSF1 = true, ABILITY_ILF_SUMMONED_UNIT_TYPE_EFNU = true, ABILITY_ILF_SUMMONED_UNIT_TYPE_NBAU = true, ABILITY_ILF_SUMMONED_UNIT_TYPE_NTOU = true, ABILITY_ILF_SUMMONED_UNIT_TYPE_ESVU = true, ABILITY_ILF_SUMMONED_UNIT_TYPES = true, ABILITY_ILF_SUMMONED_UNIT_TYPE_NDOU = true, ABILITY_ILF_ALTERNATE_FORM_UNIT_EMEU = true, ABILITY_ILF_PLAGUE_WARD_UNIT_TYPE = true, ABILITY_ILF_ALLOWED_UNIT_TYPE_BTL1 = true, ABILITY_ILF_NEW_UNIT_TYPE = true, ABILITY_ILF_RESULTING_UNIT_TYPE_ENT1 = true, ABILITY_ILF_CORPSE_UNIT_TYPE = true, ABILITY_ILF_ALLOWED_UNIT_TYPE_LOA1 = true, ABILITY_ILF_UNIT_TYPE_FOR_LIMIT_CHECK = true, ABILITY_ILF_WARD_UNIT_TYPE_STAU = true, ABILITY_ILF_EFFECT_ABILITY = true, ABILITY_ILF_CONVERSION_UNIT = true, ABILITY_ILF_UNIT_TO_PRESERVE = true, ABILITY_ILF_UNIT_TYPE_ALLOWED = true, ABILITY_ILF_SWARM_UNIT_TYPE = true, ABILITY_ILF_RESULTING_UNIT_TYPE_COAU = true, ABILITY_ILF_UNIT_TYPE_EXHU = true, ABILITY_ILF_WARD_UNIT_TYPE_HWDU = true, ABILITY_ILF_LURE_UNIT_TYPE = true, ABILITY_ILF_UNIT_TYPE_IPMU = true, ABILITY_ILF_FACTORY_UNIT_ID = true, ABILITY_ILF_SPAWN_UNIT_ID_NFYU = true, ABILITY_ILF_DESTRUCTIBLE_ID = true, ABILITY_ILF_UPGRADE_TYPE = true}, RealLevel = {ABILITY_RLF_CASTING_TIME = true, ABILITY_RLF_DURATION_NORMAL = true, ABILITY_RLF_DURATION_HERO = true, ABILITY_RLF_COOLDOWN = true, ABILITY_RLF_AREA_OF_EFFECT = true, ABILITY_RLF_CAST_RANGE = true, ABILITY_RLF_DAMAGE_HBZ2 = true, ABILITY_RLF_BUILDING_REDUCTION_HBZ4 = true, ABILITY_RLF_DAMAGE_PER_SECOND_HBZ5 = true, ABILITY_RLF_MAXIMUM_DAMAGE_PER_WAVE = true, ABILITY_RLF_MANA_REGENERATION_INCREASE = true, ABILITY_RLF_CASTING_DELAY = true, ABILITY_RLF_DAMAGE_PER_SECOND_OWW1 = true, ABILITY_RLF_MAGIC_DAMAGE_REDUCTION_OWW2 = true, ABILITY_RLF_CHANCE_TO_CRITICAL_STRIKE = true, ABILITY_RLF_DAMAGE_MULTIPLIER_OCR2 = true, ABILITY_RLF_DAMAGE_BONUS_OCR3 = true, ABILITY_RLF_CHANCE_TO_EVADE_OCR4 = true, ABILITY_RLF_DAMAGE_DEALT_PERCENT_OMI2 = true, ABILITY_RLF_DAMAGE_TAKEN_PERCENT_OMI3 = true, ABILITY_RLF_ANIMATION_DELAY = true, ABILITY_RLF_TRANSITION_TIME = true, ABILITY_RLF_MOVEMENT_SPEED_INCREASE_PERCENT_OWK2 = true, ABILITY_RLF_BACKSTAB_DAMAGE = true, ABILITY_RLF_AMOUNT_HEALED_DAMAGED_UDC1 = true, ABILITY_RLF_LIFE_CONVERTED_TO_MANA = true, ABILITY_RLF_LIFE_CONVERTED_TO_LIFE = true, ABILITY_RLF_MOVEMENT_SPEED_INCREASE_PERCENT_UAU1 = true, ABILITY_RLF_LIFE_REGENERATION_INCREASE_PERCENT = true, ABILITY_RLF_CHANCE_TO_EVADE_EEV1 = true, ABILITY_RLF_DAMAGE_PER_INTERVAL = true, ABILITY_RLF_MANA_DRAINED_PER_SECOND_EIM2 = true, ABILITY_RLF_BUFFER_MANA_REQUIRED = true, ABILITY_RLF_MAX_MANA_DRAINED = true, ABILITY_RLF_BOLT_DELAY = true, ABILITY_RLF_BOLT_LIFETIME = true, ABILITY_RLF_ALTITUDE_ADJUSTMENT_DURATION = true, ABILITY_RLF_LANDING_DELAY_TIME = true, ABILITY_RLF_ALTERNATE_FORM_HIT_POINT_BONUS = true, ABILITY_RLF_MOVE_SPEED_BONUS_INFO_PANEL_ONLY = true, ABILITY_RLF_ATTACK_SPEED_BONUS_INFO_PANEL_ONLY = true, ABILITY_RLF_LIFE_REGENERATION_RATE_PER_SECOND = true, ABILITY_RLF_STUN_DURATION_USL1 = true, ABILITY_RLF_ATTACK_DAMAGE_STOLEN_PERCENT = true, ABILITY_RLF_DAMAGE_UCS1 = true, ABILITY_RLF_MAX_DAMAGE_UCS2 = true, ABILITY_RLF_DISTANCE_UCS3 = true, ABILITY_RLF_FINAL_AREA_UCS4 = true, ABILITY_RLF_DAMAGE_UIN1 = true, ABILITY_RLF_DURATION = true, ABILITY_RLF_IMPACT_DELAY = true, ABILITY_RLF_DAMAGE_PER_TARGET_OCL1 = true, ABILITY_RLF_DAMAGE_REDUCTION_PER_TARGET = true, ABILITY_RLF_EFFECT_DELAY_OEQ1 = true, ABILITY_RLF_DAMAGE_PER_SECOND_TO_BUILDINGS = true, ABILITY_RLF_UNITS_SLOWED_PERCENT = true, ABILITY_RLF_FINAL_AREA_OEQ4 = true, ABILITY_RLF_DAMAGE_PER_SECOND_EER1 = true, ABILITY_RLF_DAMAGE_DEALT_TO_ATTACKERS = true, ABILITY_RLF_LIFE_HEALED = true, ABILITY_RLF_HEAL_INTERVAL = true, ABILITY_RLF_BUILDING_REDUCTION_ETQ3 = true, ABILITY_RLF_INITIAL_IMMUNITY_DURATION = true, ABILITY_RLF_MAX_LIFE_DRAINED_PER_SECOND_PERCENT = true, ABILITY_RLF_BUILDING_REDUCTION_UDD2 = true, ABILITY_RLF_ARMOR_DURATION = true, ABILITY_RLF_ARMOR_BONUS_UFA2 = true, ABILITY_RLF_AREA_OF_EFFECT_DAMAGE = true, ABILITY_RLF_SPECIFIC_TARGET_DAMAGE_UFN2 = true, ABILITY_RLF_DAMAGE_BONUS_HFA1 = true, ABILITY_RLF_DAMAGE_DEALT_ESF1 = true, ABILITY_RLF_DAMAGE_INTERVAL_ESF2 = true, ABILITY_RLF_BUILDING_REDUCTION_ESF3 = true, ABILITY_RLF_DAMAGE_BONUS_PERCENT = true, ABILITY_RLF_DEFENSE_BONUS_HAV1 = true, ABILITY_RLF_HIT_POINT_BONUS = true, ABILITY_RLF_DAMAGE_BONUS_HAV3 = true, ABILITY_RLF_MAGIC_DAMAGE_REDUCTION_HAV4 = true, ABILITY_RLF_CHANCE_TO_BASH = true, ABILITY_RLF_DAMAGE_MULTIPLIER_HBH2 = true, ABILITY_RLF_DAMAGE_BONUS_HBH3 = true, ABILITY_RLF_CHANCE_TO_MISS_HBH4 = true, ABILITY_RLF_DAMAGE_HTB1 = true, ABILITY_RLF_AOE_DAMAGE = true, ABILITY_RLF_SPECIFIC_TARGET_DAMAGE_HTC2 = true, ABILITY_RLF_MOVEMENT_SPEED_REDUCTION_PERCENT_HTC3 = true, ABILITY_RLF_ATTACK_SPEED_REDUCTION_PERCENT_HTC4 = true, ABILITY_RLF_ARMOR_BONUS_HAD1 = true, ABILITY_RLF_AMOUNT_HEALED_DAMAGED_HHB1 = true, ABILITY_RLF_EXTRA_DAMAGE_HCA1 = true, ABILITY_RLF_MOVEMENT_SPEED_FACTOR_HCA2 = true, ABILITY_RLF_ATTACK_SPEED_FACTOR_HCA3 = true, ABILITY_RLF_MOVEMENT_SPEED_INCREASE_PERCENT_OAE1 = true, ABILITY_RLF_ATTACK_SPEED_INCREASE_PERCENT_OAE2 = true, ABILITY_RLF_REINCARNATION_DELAY = true, ABILITY_RLF_DAMAGE_OSH1 = true, ABILITY_RLF_MAXIMUM_DAMAGE_OSH2 = true, ABILITY_RLF_DISTANCE_OSH3 = true, ABILITY_RLF_FINAL_AREA_OSH4 = true, ABILITY_RLF_GRAPHIC_DELAY_NFD1 = true, ABILITY_RLF_GRAPHIC_DURATION_NFD2 = true, ABILITY_RLF_DAMAGE_NFD3 = true, ABILITY_RLF_SUMMONED_UNIT_DAMAGE_AMS1 = true, ABILITY_RLF_MAGIC_DAMAGE_REDUCTION_AMS2 = true, ABILITY_RLF_AURA_DURATION = true, ABILITY_RLF_DAMAGE_PER_SECOND_APL2 = true, ABILITY_RLF_DURATION_OF_PLAGUE_WARD = true, ABILITY_RLF_AMOUNT_OF_HIT_POINTS_REGENERATED = true, ABILITY_RLF_ATTACK_DAMAGE_INCREASE_AKB1 = true, ABILITY_RLF_MANA_LOSS_ADM1 = true, ABILITY_RLF_SUMMONED_UNIT_DAMAGE_ADM2 = true, ABILITY_RLF_EXPANSION_AMOUNT = true, ABILITY_RLF_INTERVAL_DURATION_BGM2 = true, ABILITY_RLF_RADIUS_OF_MINING_RING = true, ABILITY_RLF_ATTACK_SPEED_INCREASE_PERCENT_BLO1 = true, ABILITY_RLF_MOVEMENT_SPEED_INCREASE_PERCENT_BLO2 = true, ABILITY_RLF_SCALING_FACTOR = true, ABILITY_RLF_HIT_POINTS_PER_SECOND_CAN1 = true, ABILITY_RLF_MAX_HIT_POINTS = true, ABILITY_RLF_DAMAGE_PER_SECOND_DEV2 = true, ABILITY_RLF_MOVEMENT_UPDATE_FREQUENCY_CHD1 = true, ABILITY_RLF_ATTACK_UPDATE_FREQUENCY_CHD2 = true, ABILITY_RLF_SUMMONED_UNIT_DAMAGE_CHD3 = true, ABILITY_RLF_MOVEMENT_SPEED_REDUCTION_PERCENT_CRI1 = true, ABILITY_RLF_ATTACK_SPEED_REDUCTION_PERCENT_CRI2 = true, ABILITY_RLF_DAMAGE_REDUCTION_CRI3 = true, ABILITY_RLF_CHANCE_TO_MISS_CRS = true, ABILITY_RLF_FULL_DAMAGE_RADIUS_DDA1 = true, ABILITY_RLF_FULL_DAMAGE_AMOUNT_DDA2 = true, ABILITY_RLF_PARTIAL_DAMAGE_RADIUS = true, ABILITY_RLF_PARTIAL_DAMAGE_AMOUNT = true, ABILITY_RLF_BUILDING_DAMAGE_FACTOR_SDS1 = true, ABILITY_RLF_MAX_DAMAGE_UCO5 = true, ABILITY_RLF_MOVE_SPEED_BONUS_UCO6 = true, ABILITY_RLF_DAMAGE_TAKEN_PERCENT_DEF1 = true, ABILITY_RLF_DAMAGE_DEALT_PERCENT_DEF2 = true, ABILITY_RLF_MOVEMENT_SPEED_FACTOR_DEF3 = true, ABILITY_RLF_ATTACK_SPEED_FACTOR_DEF4 = true, ABILITY_RLF_MAGIC_DAMAGE_REDUCTION_DEF5 = true, ABILITY_RLF_CHANCE_TO_DEFLECT = true, ABILITY_RLF_DEFLECT_DAMAGE_TAKEN_PIERCING = true, ABILITY_RLF_DEFLECT_DAMAGE_TAKEN_SPELLS = true, ABILITY_RLF_RIP_DELAY = true, ABILITY_RLF_EAT_DELAY = true, ABILITY_RLF_HIT_POINTS_GAINED_EAT3 = true, ABILITY_RLF_AIR_UNIT_LOWER_DURATION = true, ABILITY_RLF_AIR_UNIT_HEIGHT = true, ABILITY_RLF_MELEE_ATTACK_RANGE = true, ABILITY_RLF_INTERVAL_DURATION_EGM2 = true, ABILITY_RLF_EFFECT_DELAY_FLA2 = true, ABILITY_RLF_MINING_DURATION = true, ABILITY_RLF_RADIUS_OF_GRAVESTONES = true, ABILITY_RLF_RADIUS_OF_CORPSES = true, ABILITY_RLF_HIT_POINTS_GAINED_HEA1 = true, ABILITY_RLF_DAMAGE_INCREASE_PERCENT_INF1 = true, ABILITY_RLF_AUTOCAST_RANGE = true, ABILITY_RLF_LIFE_REGEN_RATE = true, ABILITY_RLF_GRAPHIC_DELAY_LIT1 = true, ABILITY_RLF_GRAPHIC_DURATION_LIT2 = true, ABILITY_RLF_DAMAGE_PER_SECOND_LSH1 = true, ABILITY_RLF_MANA_GAINED = true, ABILITY_RLF_HIT_POINTS_GAINED_MBT2 = true, ABILITY_RLF_AUTOCAST_REQUIREMENT = true, ABILITY_RLF_WATER_HEIGHT = true, ABILITY_RLF_ACTIVATION_DELAY_MIN1 = true, ABILITY_RLF_INVISIBILITY_TRANSITION_TIME = true, ABILITY_RLF_ACTIVATION_RADIUS = true, ABILITY_RLF_AMOUNT_REGENERATED = true, ABILITY_RLF_DAMAGE_PER_SECOND_POI1 = true, ABILITY_RLF_ATTACK_SPEED_FACTOR_POI2 = true, ABILITY_RLF_MOVEMENT_SPEED_FACTOR_POI3 = true, ABILITY_RLF_EXTRA_DAMAGE_POA1 = true, ABILITY_RLF_DAMAGE_PER_SECOND_POA2 = true, ABILITY_RLF_ATTACK_SPEED_FACTOR_POA3 = true, ABILITY_RLF_MOVEMENT_SPEED_FACTOR_POA4 = true, ABILITY_RLF_DAMAGE_AMPLIFICATION = true, ABILITY_RLF_CHANCE_TO_STOMP_PERCENT = true, ABILITY_RLF_DAMAGE_DEALT_WAR2 = true, ABILITY_RLF_FULL_DAMAGE_RADIUS_WAR3 = true, ABILITY_RLF_HALF_DAMAGE_RADIUS_WAR4 = true, ABILITY_RLF_SUMMONED_UNIT_DAMAGE_PRG3 = true, ABILITY_RLF_UNIT_PAUSE_DURATION = true, ABILITY_RLF_HERO_PAUSE_DURATION = true, ABILITY_RLF_HIT_POINTS_GAINED_REJ1 = true, ABILITY_RLF_MANA_POINTS_GAINED_REJ2 = true, ABILITY_RLF_MINIMUM_LIFE_REQUIRED = true, ABILITY_RLF_MINIMUM_MANA_REQUIRED = true, ABILITY_RLF_REPAIR_COST_RATIO = true, ABILITY_RLF_REPAIR_TIME_RATIO = true, ABILITY_RLF_POWERBUILD_COST = true, ABILITY_RLF_POWERBUILD_RATE = true, ABILITY_RLF_NAVAL_RANGE_BONUS = true, ABILITY_RLF_DAMAGE_INCREASE_PERCENT_ROA1 = true, ABILITY_RLF_LIFE_REGENERATION_RATE = true, ABILITY_RLF_MANA_REGEN = true, ABILITY_RLF_DAMAGE_INCREASE = true, ABILITY_RLF_SALVAGE_COST_RATIO = true, ABILITY_RLF_IN_FLIGHT_SIGHT_RADIUS = true, ABILITY_RLF_HOVERING_SIGHT_RADIUS = true, ABILITY_RLF_HOVERING_HEIGHT = true, ABILITY_RLF_DURATION_OF_OWLS = true, ABILITY_RLF_FADE_DURATION = true, ABILITY_RLF_DAY_NIGHT_DURATION = true, ABILITY_RLF_ACTION_DURATION = true, ABILITY_RLF_MOVEMENT_SPEED_FACTOR_SLO1 = true, ABILITY_RLF_ATTACK_SPEED_FACTOR_SLO2 = true, ABILITY_RLF_DAMAGE_PER_SECOND_SPO1 = true, ABILITY_RLF_MOVEMENT_SPEED_FACTOR_SPO2 = true, ABILITY_RLF_ATTACK_SPEED_FACTOR_SPO3 = true, ABILITY_RLF_ACTIVATION_DELAY_STA1 = true, ABILITY_RLF_DETECTION_RADIUS_STA2 = true, ABILITY_RLF_DETONATION_RADIUS = true, ABILITY_RLF_STUN_DURATION_STA4 = true, ABILITY_RLF_ATTACK_SPEED_BONUS_PERCENT = true, ABILITY_RLF_DAMAGE_PER_SECOND_UHF2 = true, ABILITY_RLF_LUMBER_PER_INTERVAL = true, ABILITY_RLF_ART_ATTACHMENT_HEIGHT = true, ABILITY_RLF_TELEPORT_AREA_WIDTH = true, ABILITY_RLF_TELEPORT_AREA_HEIGHT = true, ABILITY_RLF_LIFE_STOLEN_PER_ATTACK = true, ABILITY_RLF_DAMAGE_BONUS_IDAM = true, ABILITY_RLF_CHANCE_TO_HIT_UNITS_PERCENT = true, ABILITY_RLF_CHANCE_TO_HIT_HEROS_PERCENT = true, ABILITY_RLF_CHANCE_TO_HIT_SUMMONS_PERCENT = true, ABILITY_RLF_DELAY_FOR_TARGET_EFFECT = true, ABILITY_RLF_DAMAGE_DEALT_PERCENT_OF_NORMAL = true, ABILITY_RLF_DAMAGE_RECEIVED_MULTIPLIER = true, ABILITY_RLF_MANA_REGENERATION_BONUS_AS_FRACTION_OF_NORMAL = true, ABILITY_RLF_MOVEMENT_SPEED_INCREASE_ISPI = true, ABILITY_RLF_DAMAGE_PER_SECOND_IDPS = true, ABILITY_RLF_ATTACK_DAMAGE_INCREASE_CAC1 = true, ABILITY_RLF_DAMAGE_PER_SECOND_COR1 = true, ABILITY_RLF_ATTACK_SPEED_INCREASE_ISX1 = true, ABILITY_RLF_DAMAGE_WRS1 = true, ABILITY_RLF_TERRAIN_DEFORMATION_AMPLITUDE = true, ABILITY_RLF_DAMAGE_CTC1 = true, ABILITY_RLF_EXTRA_DAMAGE_TO_TARGET = true, ABILITY_RLF_MOVEMENT_SPEED_REDUCTION_CTC3 = true, ABILITY_RLF_ATTACK_SPEED_REDUCTION_CTC4 = true, ABILITY_RLF_DAMAGE_CTB1 = true, ABILITY_RLF_CASTING_DELAY_SECONDS = true, ABILITY_RLF_MANA_LOSS_PER_UNIT_DTN1 = true, ABILITY_RLF_DAMAGE_TO_SUMMONED_UNITS_DTN2 = true, ABILITY_RLF_TRANSITION_TIME_SECONDS = true, ABILITY_RLF_MANA_DRAINED_PER_SECOND_NMR1 = true, ABILITY_RLF_CHANCE_TO_REDUCE_DAMAGE_PERCENT = true, ABILITY_RLF_MINIMUM_DAMAGE = true, ABILITY_RLF_IGNORED_DAMAGE = true, ABILITY_RLF_FULL_DAMAGE_DEALT = true, ABILITY_RLF_FULL_DAMAGE_INTERVAL = true, ABILITY_RLF_HALF_DAMAGE_DEALT = true, ABILITY_RLF_HALF_DAMAGE_INTERVAL = true, ABILITY_RLF_BUILDING_REDUCTION_HFS5 = true, ABILITY_RLF_MAXIMUM_DAMAGE_HFS6 = true, ABILITY_RLF_MANA_PER_HIT_POINT = true, ABILITY_RLF_DAMAGE_ABSORBED_PERCENT = true, ABILITY_RLF_WAVE_DISTANCE = true, ABILITY_RLF_WAVE_TIME_SECONDS = true, ABILITY_RLF_DAMAGE_DEALT_UIM3 = true, ABILITY_RLF_AIR_TIME_SECONDS_UIM4 = true, ABILITY_RLF_UNIT_RELEASE_INTERVAL_SECONDS = true, ABILITY_RLF_DAMAGE_RETURN_FACTOR = true, ABILITY_RLF_DAMAGE_RETURN_THRESHOLD = true, ABILITY_RLF_RETURNED_DAMAGE_FACTOR = true, ABILITY_RLF_RECEIVED_DAMAGE_FACTOR = true, ABILITY_RLF_DEFENSE_BONUS_UTS3 = true, ABILITY_RLF_DAMAGE_BONUS_NBA1 = true, ABILITY_RLF_SUMMONED_UNIT_DURATION_SECONDS_NBA3 = true, ABILITY_RLF_MANA_PER_SUMMONED_HITPOINT = true, ABILITY_RLF_CHARGE_FOR_CURRENT_LIFE = true, ABILITY_RLF_HIT_POINTS_DRAINED = true, ABILITY_RLF_MANA_POINTS_DRAINED = true, ABILITY_RLF_DRAIN_INTERVAL_SECONDS = true, ABILITY_RLF_LIFE_TRANSFERRED_PER_SECOND = true, ABILITY_RLF_MANA_TRANSFERRED_PER_SECOND = true, ABILITY_RLF_BONUS_LIFE_FACTOR = true, ABILITY_RLF_BONUS_LIFE_DECAY = true, ABILITY_RLF_BONUS_MANA_FACTOR = true, ABILITY_RLF_BONUS_MANA_DECAY = true, ABILITY_RLF_CHANCE_TO_MISS_PERCENT = true, ABILITY_RLF_MOVEMENT_SPEED_MODIFIER = true, ABILITY_RLF_ATTACK_SPEED_MODIFIER = true, ABILITY_RLF_DAMAGE_PER_SECOND_TDG1 = true, ABILITY_RLF_MEDIUM_DAMAGE_RADIUS_TDG2 = true, ABILITY_RLF_MEDIUM_DAMAGE_PER_SECOND = true, ABILITY_RLF_SMALL_DAMAGE_RADIUS_TDG4 = true, ABILITY_RLF_SMALL_DAMAGE_PER_SECOND = true, ABILITY_RLF_AIR_TIME_SECONDS_TSP1 = true, ABILITY_RLF_MINIMUM_HIT_INTERVAL_SECONDS = true, ABILITY_RLF_DAMAGE_PER_SECOND_NBF5 = true, ABILITY_RLF_MAXIMUM_RANGE = true, ABILITY_RLF_MINIMUM_RANGE = true, ABILITY_RLF_DAMAGE_PER_TARGET_EFK1 = true, ABILITY_RLF_MAXIMUM_TOTAL_DAMAGE = true, ABILITY_RLF_MAXIMUM_SPEED_ADJUSTMENT = true, ABILITY_RLF_DECAYING_DAMAGE = true, ABILITY_RLF_MOVEMENT_SPEED_FACTOR_ESH2 = true, ABILITY_RLF_ATTACK_SPEED_FACTOR_ESH3 = true, ABILITY_RLF_DECAY_POWER = true, ABILITY_RLF_INITIAL_DAMAGE_ESH5 = true, ABILITY_RLF_MAXIMUM_LIFE_ABSORBED = true, ABILITY_RLF_MAXIMUM_MANA_ABSORBED = true, ABILITY_RLF_MOVEMENT_SPEED_INCREASE_BSK1 = true, ABILITY_RLF_ATTACK_SPEED_INCREASE_BSK2 = true, ABILITY_RLF_DAMAGE_TAKEN_INCREASE = true, ABILITY_RLF_LIFE_PER_UNIT = true, ABILITY_RLF_MANA_PER_UNIT = true, ABILITY_RLF_LIFE_PER_BUFF = true, ABILITY_RLF_MANA_PER_BUFF = true, ABILITY_RLF_SUMMONED_UNIT_DAMAGE_DVM5 = true, ABILITY_RLF_DAMAGE_BONUS_FAK1 = true, ABILITY_RLF_MEDIUM_DAMAGE_FACTOR_FAK2 = true, ABILITY_RLF_SMALL_DAMAGE_FACTOR_FAK3 = true, ABILITY_RLF_FULL_DAMAGE_RADIUS_FAK4 = true, ABILITY_RLF_HALF_DAMAGE_RADIUS_FAK5 = true, ABILITY_RLF_EXTRA_DAMAGE_PER_SECOND = true, ABILITY_RLF_MOVEMENT_SPEED_REDUCTION_LIQ2 = true, ABILITY_RLF_ATTACK_SPEED_REDUCTION_LIQ3 = true, ABILITY_RLF_MAGIC_DAMAGE_FACTOR = true, ABILITY_RLF_UNIT_DAMAGE_PER_MANA_POINT = true, ABILITY_RLF_HERO_DAMAGE_PER_MANA_POINT = true, ABILITY_RLF_UNIT_MAXIMUM_DAMAGE = true, ABILITY_RLF_HERO_MAXIMUM_DAMAGE = true, ABILITY_RLF_DAMAGE_COOLDOWN = true, ABILITY_RLF_DISTRIBUTED_DAMAGE_FACTOR_SPL1 = true, ABILITY_RLF_LIFE_REGENERATED = true, ABILITY_RLF_MANA_REGENERATED = true, ABILITY_RLF_MANA_LOSS_PER_UNIT_IDC1 = true, ABILITY_RLF_SUMMONED_UNIT_DAMAGE_IDC2 = true, ABILITY_RLF_ACTIVATION_DELAY_IMO2 = true, ABILITY_RLF_LURE_INTERVAL_SECONDS = true, ABILITY_RLF_DAMAGE_BONUS_ISR1 = true, ABILITY_RLF_DAMAGE_REDUCTION_ISR2 = true, ABILITY_RLF_DAMAGE_BONUS_IPV1 = true, ABILITY_RLF_LIFE_STEAL_AMOUNT = true, ABILITY_RLF_LIFE_RESTORED_FACTOR = true, ABILITY_RLF_MANA_RESTORED_FACTOR = true, ABILITY_RLF_ATTACH_DELAY = true, ABILITY_RLF_REMOVE_DELAY = true, ABILITY_RLF_HERO_REGENERATION_DELAY = true, ABILITY_RLF_UNIT_REGENERATION_DELAY = true, ABILITY_RLF_MAGIC_DAMAGE_REDUCTION_NSA4 = true, ABILITY_RLF_HIT_POINTS_PER_SECOND_NSA5 = true, ABILITY_RLF_DAMAGE_TO_SUMMONED_UNITS_IXS1 = true, ABILITY_RLF_MAGIC_DAMAGE_REDUCTION_IXS2 = true, ABILITY_RLF_SUMMONED_UNIT_DURATION = true, ABILITY_RLF_SHIELD_COOLDOWN_TIME = true, ABILITY_RLF_DAMAGE_PER_SECOND_NDO1 = true, ABILITY_RLF_SUMMONED_UNIT_DURATION_SECONDS_NDO3 = true, ABILITY_RLF_MEDIUM_DAMAGE_RADIUS_FLK1 = true, ABILITY_RLF_SMALL_DAMAGE_RADIUS_FLK2 = true, ABILITY_RLF_FULL_DAMAGE_AMOUNT_FLK3 = true, ABILITY_RLF_MEDIUM_DAMAGE_AMOUNT = true, ABILITY_RLF_SMALL_DAMAGE_AMOUNT = true, ABILITY_RLF_MOVEMENT_SPEED_REDUCTION_PERCENT_HBN1 = true, ABILITY_RLF_ATTACK_SPEED_REDUCTION_PERCENT_HBN2 = true, ABILITY_RLF_MAX_MANA_DRAINED_UNITS = true, ABILITY_RLF_DAMAGE_RATIO_UNITS_PERCENT = true, ABILITY_RLF_MAX_MANA_DRAINED_HEROS = true, ABILITY_RLF_DAMAGE_RATIO_HEROS_PERCENT = true, ABILITY_RLF_SUMMONED_DAMAGE = true, ABILITY_RLF_DISTRIBUTED_DAMAGE_FACTOR_NCA1 = true, ABILITY_RLF_INITIAL_DAMAGE_PXF1 = true, ABILITY_RLF_DAMAGE_PER_SECOND_PXF2 = true, ABILITY_RLF_DAMAGE_PER_SECOND_MLS1 = true, ABILITY_RLF_BEAST_COLLISION_RADIUS = true, ABILITY_RLF_DAMAGE_AMOUNT_NST3 = true, ABILITY_RLF_DAMAGE_RADIUS = true, ABILITY_RLF_DAMAGE_DELAY = true, ABILITY_RLF_FOLLOW_THROUGH_TIME = true, ABILITY_RLF_ART_DURATION = true, ABILITY_RLF_MOVEMENT_SPEED_REDUCTION_PERCENT_NAB1 = true, ABILITY_RLF_ATTACK_SPEED_REDUCTION_PERCENT_NAB2 = true, ABILITY_RLF_PRIMARY_DAMAGE = true, ABILITY_RLF_SECONDARY_DAMAGE = true, ABILITY_RLF_DAMAGE_INTERVAL_NAB6 = true, ABILITY_RLF_GOLD_COST_FACTOR = true, ABILITY_RLF_LUMBER_COST_FACTOR = true, ABILITY_RLF_MOVE_SPEED_BONUS_NEG1 = true, ABILITY_RLF_DAMAGE_BONUS_NEG2 = true, ABILITY_RLF_DAMAGE_AMOUNT_NCS1 = true, ABILITY_RLF_DAMAGE_INTERVAL_NCS2 = true, ABILITY_RLF_MAX_DAMAGE_NCS4 = true, ABILITY_RLF_BUILDING_DAMAGE_FACTOR_NCS5 = true, ABILITY_RLF_EFFECT_DURATION = true, ABILITY_RLF_SPAWN_INTERVAL_NSY1 = true, ABILITY_RLF_SPAWN_UNIT_DURATION = true, ABILITY_RLF_SPAWN_UNIT_OFFSET = true, ABILITY_RLF_LEASH_RANGE_NSY5 = true, ABILITY_RLF_SPAWN_INTERVAL_NFY1 = true, ABILITY_RLF_LEASH_RANGE_NFY2 = true, ABILITY_RLF_CHANCE_TO_DEMOLISH = true, ABILITY_RLF_DAMAGE_MULTIPLIER_BUILDINGS = true, ABILITY_RLF_DAMAGE_MULTIPLIER_UNITS = true, ABILITY_RLF_DAMAGE_MULTIPLIER_HEROES = true, ABILITY_RLF_BONUS_DAMAGE_MULTIPLIER = true, ABILITY_RLF_DEATH_DAMAGE_FULL_AMOUNT = true, ABILITY_RLF_DEATH_DAMAGE_FULL_AREA = true, ABILITY_RLF_DEATH_DAMAGE_HALF_AMOUNT = true, ABILITY_RLF_DEATH_DAMAGE_HALF_AREA = true, ABILITY_RLF_DEATH_DAMAGE_DELAY = true, ABILITY_RLF_DAMAGE_AMOUNT_NSO1 = true, ABILITY_RLF_DAMAGE_PERIOD = true, ABILITY_RLF_DAMAGE_PENALTY = true, ABILITY_RLF_MOVEMENT_SPEED_REDUCTION_PERCENT_NSO4 = true, ABILITY_RLF_ATTACK_SPEED_REDUCTION_PERCENT_NSO5 = true, ABILITY_RLF_SPLIT_DELAY = true, ABILITY_RLF_MAX_HITPOINT_FACTOR = true, ABILITY_RLF_LIFE_DURATION_SPLIT_BONUS = true, ABILITY_RLF_WAVE_INTERVAL = true, ABILITY_RLF_BUILDING_DAMAGE_FACTOR_NVC4 = true, ABILITY_RLF_FULL_DAMAGE_AMOUNT_NVC5 = true, ABILITY_RLF_HALF_DAMAGE_FACTOR = true, ABILITY_RLF_INTERVAL_BETWEEN_PULSES = true}, BooleanLevel = {ABILITY_BLF_PERCENT_BONUS_HAB2 = true, ABILITY_BLF_USE_TELEPORT_CLUSTERING_HMT3 = true, ABILITY_BLF_NEVER_MISS_OCR5 = true, ABILITY_BLF_EXCLUDE_ITEM_DAMAGE = true, ABILITY_BLF_BACKSTAB_DAMAGE = true, ABILITY_BLF_INHERIT_UPGRADES_UAN3 = true, ABILITY_BLF_MANA_CONVERSION_AS_PERCENT = true, ABILITY_BLF_LIFE_CONVERSION_AS_PERCENT = true, ABILITY_BLF_LEAVE_TARGET_ALIVE = true, ABILITY_BLF_PERCENT_BONUS_UAU3 = true, ABILITY_BLF_DAMAGE_IS_PERCENT_RECEIVED = true, ABILITY_BLF_MELEE_BONUS = true, ABILITY_BLF_RANGED_BONUS = true, ABILITY_BLF_FLAT_BONUS = true, ABILITY_BLF_NEVER_MISS_HBH5 = true, ABILITY_BLF_PERCENT_BONUS_HAD2 = true, ABILITY_BLF_CAN_DEACTIVATE = true, ABILITY_BLF_RAISED_UNITS_ARE_INVULNERABLE = true, ABILITY_BLF_PERCENTAGE_OAR2 = true, ABILITY_BLF_SUMMON_BUSY_UNITS = true, ABILITY_BLF_CREATES_BLIGHT = true, ABILITY_BLF_EXPLODES_ON_DEATH = true, ABILITY_BLF_ALWAYS_AUTOCAST_FAE2 = true, ABILITY_BLF_REGENERATE_ONLY_AT_NIGHT = true, ABILITY_BLF_SHOW_SELECT_UNIT_BUTTON = true, ABILITY_BLF_SHOW_UNIT_INDICATOR = true, ABILITY_BLF_CHARGE_OWNING_PLAYER = true, ABILITY_BLF_PERCENTAGE_ARM2 = true, ABILITY_BLF_TARGET_IS_INVULNERABLE = true, ABILITY_BLF_TARGET_IS_MAGIC_IMMUNE = true, ABILITY_BLF_KILL_ON_CASTER_DEATH = true, ABILITY_BLF_NO_TARGET_REQUIRED_REJ4 = true, ABILITY_BLF_ACCEPTS_GOLD = true, ABILITY_BLF_ACCEPTS_LUMBER = true, ABILITY_BLF_PREFER_HOSTILES_ROA5 = true, ABILITY_BLF_PREFER_FRIENDLIES_ROA6 = true, ABILITY_BLF_ROOTED_TURNING = true, ABILITY_BLF_ALWAYS_AUTOCAST_SLO3 = true, ABILITY_BLF_HIDE_BUTTON = true, ABILITY_BLF_USE_TELEPORT_CLUSTERING_ITP2 = true, ABILITY_BLF_IMMUNE_TO_MORPH_EFFECTS = true, ABILITY_BLF_DOES_NOT_BLOCK_BUILDINGS = true, ABILITY_BLF_AUTO_ACQUIRE_ATTACK_TARGETS = true, ABILITY_BLF_IMMUNE_TO_MORPH_EFFECTS_GHO2 = true, ABILITY_BLF_DO_NOT_BLOCK_BUILDINGS = true, ABILITY_BLF_INCLUDE_RANGED_DAMAGE = true, ABILITY_BLF_INCLUDE_MELEE_DAMAGE = true, ABILITY_BLF_MOVE_TO_PARTNER = true, ABILITY_BLF_CAN_BE_DISPELLED = true, ABILITY_BLF_IGNORE_FRIENDLY_BUFFS = true, ABILITY_BLF_DROP_ITEMS_ON_DEATH = true, ABILITY_BLF_CAN_USE_ITEMS = true, ABILITY_BLF_CAN_GET_ITEMS = true, ABILITY_BLF_CAN_DROP_ITEMS = true, ABILITY_BLF_REPAIRS_ALLOWED = true, ABILITY_BLF_CASTER_ONLY_SPLASH = true, ABILITY_BLF_NO_TARGET_REQUIRED_IRL4 = true, ABILITY_BLF_DISPEL_ON_ATTACK = true, ABILITY_BLF_AMOUNT_IS_RAW_VALUE = true, ABILITY_BLF_SHARED_SPELL_COOLDOWN = true, ABILITY_BLF_SLEEP_ONCE = true, ABILITY_BLF_ALLOW_ON_ANY_PLAYER_SLOT = true, ABILITY_BLF_DISABLE_OTHER_ABILITIES = true, ABILITY_BLF_ALLOW_BOUNTY = true}, StringLevel = {ABILITY_SLF_ICON_NORMAL = true, ABILITY_SLF_CASTER = true, ABILITY_SLF_TARGET = true, ABILITY_SLF_SPECIAL = true, ABILITY_SLF_EFFECT = true, ABILITY_SLF_AREA_EFFECT = true, ABILITY_SLF_LIGHTNING_EFFECTS = true, ABILITY_SLF_MISSILE_ART = true, ABILITY_SLF_TOOLTIP_LEARN = true, ABILITY_SLF_TOOLTIP_LEARN_EXTENDED = true, ABILITY_SLF_TOOLTIP_NORMAL = true, ABILITY_SLF_TOOLTIP_TURN_OFF = true, ABILITY_SLF_TOOLTIP_NORMAL_EXTENDED = true, ABILITY_SLF_TOOLTIP_TURN_OFF_EXTENDED = true, ABILITY_SLF_NORMAL_FORM_UNIT_EME1 = true, ABILITY_SLF_SPAWNED_UNITS = true, ABILITY_SLF_ABILITY_FOR_UNIT_CREATION = true, ABILITY_SLF_NORMAL_FORM_UNIT_MIL1 = true, ABILITY_SLF_ALTERNATE_FORM_UNIT_MIL2 = true, ABILITY_SLF_BASE_ORDER_ID_ANS5 = true, ABILITY_SLF_MORPH_UNITS_GROUND = true, ABILITY_SLF_MORPH_UNITS_AIR = true, ABILITY_SLF_MORPH_UNITS_AMPHIBIOUS = true, ABILITY_SLF_MORPH_UNITS_WATER = true, ABILITY_SLF_UNIT_TYPE_ONE = true, ABILITY_SLF_UNIT_TYPE_TWO = true, ABILITY_SLF_UNIT_TYPE_SOD2 = true, ABILITY_SLF_SUMMON_1_UNIT_TYPE = true, ABILITY_SLF_SUMMON_2_UNIT_TYPE = true, ABILITY_SLF_RACE_TO_CONVERT = true, ABILITY_SLF_PARTNER_UNIT_TYPE = true, ABILITY_SLF_PARTNER_UNIT_TYPE_ONE = true, ABILITY_SLF_PARTNER_UNIT_TYPE_TWO = true, ABILITY_SLF_REQUIRED_UNIT_TYPE = true, ABILITY_SLF_CONVERTED_UNIT_TYPE = true, ABILITY_SLF_SPELL_LIST = true, ABILITY_SLF_BASE_ORDER_ID_SPB5 = true, ABILITY_SLF_BASE_ORDER_ID_NCL6 = true, ABILITY_SLF_ABILITY_UPGRADE_1 = true, ABILITY_SLF_ABILITY_UPGRADE_2 = true, ABILITY_SLF_ABILITY_UPGRADE_3 = true, ABILITY_SLF_ABILITY_UPGRADE_4 = true, ABILITY_SLF_SPAWN_UNIT_ID_NSY2 = true}}
    function AbilityField.set(ability, unit, val, field, lvl)
      if (unit:getAbilityLevel(ability) <= 0) then
        Debug("Unit does not have the ability for field changing.")
        return false
      end
      local abil_instance = BlzGetUnitAbility(unit:getObj(), ability:getId())
      if (lvl == nil) then
        lvl = 1
      end
      if (AbilityField.Integer[field]) then
        if (type(val) == "number") then
          val = math.floor(val)
        end
        if (type(val) ~= "integer") then
          Debug("AbilityField got wrong type.")
          return false
        end
        BlzSetAbilityIntegerField(abil_instance, field, val)
        return true
      end
      if (AbilityField.Real[field]) then
        if (type(val) ~= "number" and type(val) ~= "integer") then
          Debug("AbilityField got wrong type.")
          return false
        end
        BlzSetAbilityRealField(abil_instance, field, val)
        return true
      end
      if (AbilityField.Boolean[field]) then
        if (type(val) ~= "boolean") then
          Debug("AbilityField got wrong type.")
          return false
        end
        BlzSetAbilityBooleanField(abil_instance, field, val)
        return true
      end
      if (AbilityField.String[field]) then
        if (type(val) ~= "string") then
          Debug("AbilityField got wrong type.")
          return false
        end
        BlzSetAbilityStringField(abil_instance, field, val)
        return true
      end
      if (AbilityField.IntegerLevel[field]) then
        if (type(val) == "number") then
          val = math.floor(val)
        end
        if (type(val) ~= "integer") then
          Debug("AbilityField got wrong type.")
          return false
        end
        BlzSetAbilityIntegerLevelField(abil_instance, field, (lvl-1), val)
        return true
      end
      if (AbilityField.RealLevel[field]) then
        if (type(val) ~= "number" and type(val) ~= "integer") then
          Debug("AbilityField got wrong type.")
          return false
        end
        BlzSetAbilityRealLevelField(abil_instance, field, (lvl-1), val)
        return true
      end
      if (AbilityField.BooleanLevel[field]) then
        if (type(val) ~= "boolean") then
          Debug("AbilityField got wrong type.")
          return false
        end
        BlzSetAbilityBooleanLevelField(abil_instance, field, (lvl-1), val)
        return true
      end
      if (AbilityField.StringLevel[field]) then
        if (type(val) ~= "string") then
          Debug("AbilityField got wrong type.")
          return false
        end
        BlzSetAbilityStringLevelField(abil_instance, field, (lvl-1), val)
        return true
      end
      Debug("Wrong ability field type.")
      return false
    end
    return AbilityField
end
__require_data.module["unit.unitDB"] = function()
    local UnitDB = {}
    function UnitDB.add(unit_obj, unit)
      UnitDB[unit_obj] = unit
    end
    function UnitDB.rm(unit_obj)
      UnitDB[unit_obj] = nil
    end
    function UnitDB.get(unit_obj)
      return UnitDB[unit_obj]
    end
    return UnitDB
end
__require_data.module["unit.parameters.unitMathParameter"] = function()
    local Settings = require("utils.settings")
    local UnitMathParameter = {}
    local half_cap = Settings.UnitParameters.value_to_get_half_cap_for_percent_value
    function UnitMathParameter.linear(base, mult, bonus)
      return ((base*mult)+bonus)
    end
    function UnitMathParameter.inverseLinear(base, mult, bonus)
      return ((base/mult)-bonus)
    end
    function UnitMathParameter.percent(base, mult, bonus, param_cap)
      local val = ((base*mult)+bonus)
      local k = (val/(val+half_cap))
      return (k*param_cap)
    end
    function UnitMathParameter.inversePercent(base, mult, bonus, param_cap)
      local val = ((base*mult)+bonus)
      local k = (val/(val+half_cap))
      return (100-(k*(100-param_cap)))
    end
    return UnitMathParameter
end
__require_data.module["ability.ability"] = function()
    local Ability = {}
    local Ability_meta = {__index = Ability}
    function Ability_meta.__tostring(self)
      local str = string.format("Ability %s (%s) with callbacks:\n", self:getName(), ID2str(self:getId()))
      local callbacks = ""
      if (self:getCallback("start")) then
        callbacks = callbacks..",start"
      end
      if (self:getCallback("casting")) then
        callbacks = callbacks..",casting"
      end
      if (self:getCallback("interrupt")) then
        callbacks = callbacks..",interrupt"
      end
      if (self:getCallback("finish")) then
        callbacks = callbacks..",finish"
      end
      callbacks = callbacks:sub(2).."\n"
      return str..callbacks
    end
    local AbilityDB = {}
    function Ability.new(id)
      id = ID(id)
      local ability = {id = id, _start = nil, _casting = nil, _interrupt = nil, _finish = nil, _castingTime = nil}
      setmetatable(ability, Ability_meta)
      AbilityDB[id] = ability
      return ability
    end
    function Ability.getAbility(id)
      id = ID(id)
      if (id) then
        return AbilityDB[id]
      end
      return nil
    end
    function Ability:getId()
      return self.id
    end
    function Ability:setCallback(callback, type)
      if (type == "start") then
        self._start = callback
      end
      if (type == "casting") then
        self._casting = callback
      end
      if (type == "interrupt") then
        self._interrupt = callback
      end
      if (type == "finish") then
        self._finish = callback
      end
    end
    function Ability:getCallback(type)
      if (type == "start") then
        return self._start
      end
      if (type == "casting") then
        return self._casting
      end
      if (type == "interrupt") then
        return self._interrupt
      end
      if (type == "finish") then
        return self._finish
      end
    end
    function Ability:runCallback(callback_type, ...)
      if (callback_type == "start") then
        if (self._start ~= nil) then
          return self._start(...)
        else
          return true
        end
      end
      if (callback_type == "casting") then
        if (self._casting ~= nil) then
          return self._casting(...)
        else
          return true
        end
      end
      if (callback_type == "interrupt") then
        if (self._interrupt ~= nil) then
          self._interrupt(...)
        end
      end
      if (callback_type == "finish") then
        if (self._finish ~= nil) then
          self._finish(...)
        end
      end
    end
    function Ability:setCastingTime(time)
      self._casting_time = time
    end
    function Ability:getCastingTime(caster)
      return self._casting_time
    end
    function Ability:setName(name)
      self._name = name
    end
    function Ability:getName()
      return self._name
    end
    function Ability:setTooltip(tooltip, lvl, player_index)
      if (player_index == nil) then
        BlzSetAbilityTooltip(self.id, tooltip, lvl)
        return nil
      end
      local local_player_index = player2index(GetLocalPlayer())
      if (player_index == local_player_index) then
        BlzSetAbilityTooltip(self.id, tooltip, lvl)
      end
    end
    function Ability:setExtendedTooltip(ext_tooltip, lvl, player_index)
      if (player_index == nil) then
        BlzSetAbilityExtendedTooltip(self.id, ext_tooltip, lvl)
        return nil
      end
      local local_player_index = player2index(GetLocalPlayer())
      if (player_index == local_player_index) then
        BlzSetAbilityExtendedTooltip(self.id, ext_tooltip, lvl)
      end
    end
    function Ability:setIcon(icon_path, player_index)
      if (player_index == nil) then
        BlzSetAbilityIcon(self.id, icon_path)
        return nil
      end
      local local_player_index = player2index(GetLocalPlayer())
      if (player_index == local_player_index) then
        BlzSetAbilityIcon(self.id, icon_path)
      end
    end
    function Ability:setPosition(x, y, player_index)
      if (player_index == nil) then
        BlzSetAbilityPosX(self.id, x)
        BlzSetAbilityPosY(self.id, y)
        return nil
      end
      local local_player_index = player2index(GetLocalPlayer())
      if (player_index == local_player_index) then
        BlzSetAbilityPosX(self.id, x)
        BlzSetAbilityPosY(self.id, y)
      end
    end
    function GetSpellAbility()
      return Ability.getAbility(GetSpellAbilityId())
    end
    return Ability
end
__require_data.module["unit.parameters.unitApplyParameter"] = function()
    local Settings = require("utils.settings")
    local Ability = require("ability.ability")
    local UnitApplyParameter = {}
    local attack_dispertion = Settings.UnitParameters.attack_dispersion
    local crit_and_dodge_id = "AM#%"
    local crit_and_dodge_abil = Ability.new(crit_and_dodge_id)
    local resist_id = "AM#&"
    local resist_abil = Ability.new(resist_id)
    function UnitApplyParameter.attack(unit, val)
      local k = (1-attack_dispertion)
      local dmg = (k*val)
      local dice_sides = ((2*attack_dispertion)*val)
      local unit_obj = unit:getObj()
      BlzSetUnitBaseDamage(unit_obj, math.floor(dmg), 0)
      BlzSetUnitDiceNumber(unit_obj, 1, 0)
      BlzSetUnitDiceSides(unit_obj, math.floor((dice_sides+1)), 0)
    end
    function UnitApplyParameter.attackSpeed(unit, val)
      BlzSetUnitAttackCooldown(unit:getObj(), val, 1)
    end
    function UnitApplyParameter.armor(unit, val)
      BlzSetUnitArmor(unit:getObj(), math.floor(val))
    end
    function UnitApplyParameter.spellPower(unit, val)

    end
    function UnitApplyParameter.castSpeed(unit, val)

    end
    function UnitApplyParameter.resistance(unit, val)
      if (unit:getAbilityLevel(resist_abil) <= 0) then
        unit:addAbility(resist_abil)
      end
      unit:changeAbilityField(resist_abil, val, ABILITY_RLF_DAMAGE_REDUCTION_ISR2, 1)
    end
    function UnitApplyParameter.cooldown(unit, val)

    end
    function UnitApplyParameter.health(unit, val)
      BlzSetUnitMaxHP(unit:getObj(), math.floor(val))
    end
    function UnitApplyParameter.regeneration(unit, val)
      BlzSetUnitRealField(unit:getObj(), UNIT_RF_HIT_POINTS_REGENERATION_RATE, val)
    end
    function UnitApplyParameter.mana(unit, val)
      BlzSetUnitMaxMana(unit:getObj(), math.floor(val))
    end
    function UnitApplyParameter.recovery(unit, val)
      BlzSetUnitRealField(unit:getObj(), UNIT_RF_MANA_REGENERATION, val)
    end
    function UnitApplyParameter.critChance(unit, val)
      if (unit:getAbilityLevel(crit_and_dodge_abil) <= 0) then
        unit:addAbility(crit_and_dodge_abil)
      end
      unit:changeAbilityField(crit_and_dodge_abil, val, ABILITY_RLF_CHANCE_TO_CRITICAL_STRIKE, 1)
    end
    function UnitApplyParameter.critPower(unit, val)
      if (unit:getAbilityLevel(crit_and_dodge_abil) <= 0) then
        unit:addAbility(crit_and_dodge_abil)
      end
      unit:changeAbilityField(crit_and_dodge_abil, val, ABILITY_RLF_DAMAGE_MULTIPLIER_OCR2, 1)
    end
    function UnitApplyParameter.dodgeChance(unit, val)
      val = (val/100)
      if (unit:getAbilityLevel(crit_and_dodge_abil) <= 0) then
        unit:addAbility(crit_and_dodge_abil)
      end
      unit:changeAbilityField(crit_and_dodge_abil, val, ABILITY_RLF_CHANCE_TO_EVADE_OCR4, 1)
    end
    function UnitApplyParameter.strength(unit, val)
      SetHeroStr(unit:getObj(), math.floor(val), true)
    end
    function UnitApplyParameter.agility(unit, val)
      SetHeroAgi(unit:getObj(), math.floor(val), true)
    end
    function UnitApplyParameter.strength(unit, val)
      SetHeroInt(unit:getObj(), math.floor(val), true)
    end
    return UnitApplyParameter
end
__require_data.module["unit.parameters.unitParameter"] = function()
    local UnitParameter = {}
    local UnitParameter_meta = {__index = UnitParameter}
    function UnitParameter.new(unit_obj, base, apply_param_func, math_func, max_val)
      local container = {__unit_obj = unit_obj, __base = base, __bonus = 0, __mult = 1, __res = math_func(base, mult, bonus, max_val), __cap = max_val, __apply_param_func = apply_param_func, __math_func = math_func}
      setmetatable(container, UnitParameter_meta)
      container:update()
      return container
    end
    function UnitParameter:set(base, mult, bonus)
      self.__base = base
      self.__mult = mult
      self.__bonus = bonus
      self:update()
    end
    function UnitParameter:add(base, mult, bonus)
      self.__base = (self.__base+base)
      self.__mult = (self.__mult+mult)
      self.__bonus = (self.__bonus+bonus)
      self:update()
    end
    function UnitParameter:addBase(base)
      self.__base = (self.__base+base)
      self:update()
    end
    function UnitParameter:getAll()
      return self.__base, self.__mult, self.__bonus, self.__math_func(self.__base, self.__mult, self.__bonus, self.__cap)
    end
    function UnitParameter:getBase()
      return self.__base
    end
    function UnitParameter:getBonus()
      return self.__bonus
    end
    function UnitParameter:getMult()
      return self.__mult
    end
    function UnitParameter:getResult()
      return self.__res
    end
    function UnitParameter:update()
      self.__res = self.__math_func(self.__base, self.__mult, self.__bonus, self.__cap)
      self.__apply_param_func(self.__unit_obj, self.__res)
    end
    return UnitParameter
end
__require_data.module["unit.parameters.unitParameterContainer"] = function()
    local UnitParameter = require("unit.parameters.unitParameter")
    local ApplyParam = require("unit.parameters.unitApplyParameter")
    local MathParam = require("unit.parameters.unitMathParameter")
    local ParameterContainer = {}
    local ParameterContainer_meta = {__index = ParameterContainer}
    function ParameterContainer.new(unit)
      local parameter_container = {__unit_obj = unit:getObj()}
      parameter_container.__attack = UnitParameter.new(unit, 1, ApplyParam.attack, MathParam.linear)
      parameter_container.__attackSpeed = UnitParameter.new(unit, 2, ApplyParam.attackSpeed, MathParam.inverseLinear)
      parameter_container.__armor = UnitParameter.new(unit, 0, ApplyParam.armor, MathParam.linear)
      parameter_container.__spellPower = UnitParameter.new(unit, 0, ApplyParam.spellPower, MathParam.linear)
      parameter_container.__castSpeed = UnitParameter.new(unit, 0, ApplyParam.castSpeed, MathParam.inversePercent, 25)
      parameter_container.__resistance = UnitParameter.new(unit, 0, ApplyParam.resistance, MathParam.percent, 90)
      parameter_container.__health = UnitParameter.new(unit, 100, ApplyParam.health, MathParam.linear)
      parameter_container.__regeneration = UnitParameter.new(unit, 0, ApplyParam.regeneration, MathParam.linear)
      parameter_container.__mana = UnitParameter.new(unit, 100, ApplyParam.mana, MathParam.linear)
      parameter_container.__recovery = UnitParameter.new(unit, 0, ApplyParam.recovery, MathParam.linear)
      parameter_container.__critChance = UnitParameter.new(unit, 0, ApplyParam.critChance, MathParam.percent, 100)
      parameter_container.__critPower = UnitParameter.new(unit, 1, ApplyParam.critPower, MathParam.linear)
      parameter_container.__dodge = UnitParameter.new(unit, 0, ApplyParam.dodgeChance, MathParam.percent, 75)
      parameter_container.__cooldown = UnitParameter.new(unit, 0, ApplyParam.cooldown, MathParam.percent, 75)
      setmetatable(parameter_container, ParameterContainer_meta)
      Debug("Done")
      local string_id = ID2str(unit:getId())
      local first = string_id:sub(1, 1)
      if (first == string.upper(first)) then
        parameter_container.strength = UnitParameter.new(unit, 1, ApplyParam.strength, MathParam.linear)
        parameter_container.agility = UnitParameter.new(unit, 1, ApplyParam.agility, MathParam.linear)
        parameter_container.intelligence = UnitParameter.new(unit, 1, ApplyParam.intelligence, MathParam.linear)
      end
      Debug("Done")
      return parameter_container
    end
    function ParameterContainer:addAttack(base, mult, bonus)
      self.__attack:add(base, mult, bonus)
    end
    function ParameterContainer:getAttack()
      return self.__attack:get()
    end
    function ParameterContainer:setAttacksPerSec(base)
      _, mult, bonus, _ = self.__attackSpeed:get()
      self.__attackSpeed:set(base, mult, bonus)
    end
    function ParameterContainer:addAttackSpeed(mult)
      self.__attackSpeed:add(0, mult, 0)
    end
    function ParameterContainer:getAttackSpeed()
      base, mult, _, res = self.__attackSpeed:get()
      return base, mult, res
    end
    function ParameterContainer:addArmor(base, mult, bonus)
      self.__armor:add(base, mult, bonus)
    end
    function ParameterContainer:getArmor()
      return self.__armor:get()
    end
    function ParameterContainer:addSpellPower(base, mult, bonus)
      self.__spellPower:add(base, mult, bonus)
    end
    function ParameterContainer:getSpellPower()
      return self.__spellPower:get()
    end
    function ParameterContainer:addCastSpeed(base, mult, bonus)
      self.__castSpeed:add(base, mult, bonus)
    end
    function ParameterContainer:getCastSpeed()
      return self.__castSpeed:get()
    end
    function ParameterContainer:addResistance(base, mult, bonus)
      self.__resistance:add(base, mult, bonus)
    end
    function ParameterContainer:getResistance()
      return self.__resistance:get()
    end
    function ParameterContainer:addHealth(base, mult, bonus)
      self.__health:add(base, mult, bonus)
    end
    function ParameterContainer:getHealth()
      return self.__health:get()
    end
    function ParameterContainer:addRegeneration(base, mult, bonus)
      self.__regeneration:add(base, mult, bonus)
    end
    function ParameterContainer:getRegeneration()
      return self.__regeneration:get()
    end
    function ParameterContainer:addMana(base, mult, bonus)
      self.__mana:add(base, mult, bonus)
    end
    function ParameterContainer:getMana()
      return self.__mana:get()
    end
    function ParameterContainer:addRecovery(base, mult, bonus)
      self.__recovery:add(base, mult, bonus)
    end
    function ParameterContainer:getRecovery()
      return self.__recovery:get()
    end
    function ParameterContainer:addCritChance(base, mult, bonus)
      self.__critChance:add(base, mult, bonus)
    end
    function ParameterContainer:getCritChance()
      return self.__critChance:get()
    end
    function ParameterContainer:addCritPower(base, mult, bonus)
      self.__critPower:add(base, mult, bonus)
    end
    function ParameterContainer:getCritPower()
      return self.__critPower:get()
    end
    function ParameterContainer:addDodgeChance(base, mult, bonus)
      self.__dodge:add(base, mult, bonus)
    end
    function ParameterContainer:getDodgeChance()
      return self.__dodge:get()
    end
    function ParameterContainer:addCooldown(base, mult, bonus)
      self.__cooldown:add(base, mult, bonus)
    end
    function ParameterContainer:getCooldown()
      return self.__cooldown:get()
    end
    function ParameterContainer:addStrength(base, mult, bonus)
      if (self.strength ~= nil) then
        self.strength:add(base, mult, bonus)
      end
    end
    function ParameterContainer:getStrength()
      if (self.strength ~= nil) then
        return self.strength:get()
      else
        return 0, 0, 0, 0
      end
    end
    function ParameterContainer:addAgility(base, mult, bonus)
      if (self.agility ~= nil) then
        self.agility:add(base, mult, bonus)
      end
    end
    function ParameterContainer:getAgility()
      if (self.agility ~= nil) then
        return self.agility:get()
      else
        return 0, 0, 0, 0
      end
    end
    function ParameterContainer:addIntelligence(base, mult, bonus)
      if (self.intelligence ~= nil) then
        self.intelligence:add(base, mult, bonus)
      end
    end
    function ParameterContainer:getIntelligence()
      if (self.intelligence ~= nil) then
        return self.intelligence:get()
      else
        return 0, 0, 0, 0
      end
    end
    return ParameterContainer
end
__require_data.module["unit.unit"] = function()
    local ParameterContainer = require("unit.parameters.unitParameterContainer")
    local UnitDB = require("unit.unitDB")
    local AbilityField = require("ability.abilityField")
    local Unit = {}
    local Unit_meta = {__index = Unit, __gc = Unit.destroy}
    function Unit_meta.__tostring(self)
      Debug("here")
      return string.format("Unit %s (%s) at [%.2f, %.2f, %.2f]", self:getName(), self:getId(), self:getX(), self:getY(), self:getZ())
    end
    local __replaced_functions = {GetLevelingUnit = GetLevelingUnit, GetLearningUnit = GetLearningUnit, GetRevivableUnit = GetRevivableUnit, GetRevivingUnit = GetRevivingUnit, GetAttacker = GetAttacker, GetRescuer = GetRescuer, GetDyingUnit = GetDyingUnit, GetKillingUnit = GetKillingUnit, GetDecayingUnit = GetDecayingUnit, GetConstructingStructure = GetConstructingStructure, GetCancelledStructure = GetCancelledStructure, GetConstructedStructure = GetConstructedStructure, GetResearchingUnit = GetResearchingUnit, GetTrainedUnit = GetTrainedUnit, GetDetectedUnit = GetDetectedUnit, GetSummoningUnit = GetSummoningUnit, GetSummonedUnit = GetSummonedUnit, GetTransportUnit = GetTransportUnit, GetLoadedUnit = GetLoadedUnit, GetSellingUnit = GetSellingUnit, GetSoldUnit = GetSoldUnit, GetBuyingUnit = GetBuyingUnit, GetChangingUnit = GetChangingUnit, GetManipulatingUnit = GetManipulatingUnit, GetOrderedUnit = GetOrderedUnit, GetOrderTargetUnit = GetOrderTargetUnit, GetSpellAbilityUnit = GetSpellAbilityUnit, GetSpellTargetUnit = GetSpellTargetUnit, GetTriggerUnit = GetTriggerUnit, GetEventDamage = GetEventDamage, GetEventDamageSource = GetEventDamageSource, GetEventTargetUnit = GetEventTargetUnit, CreateUnit = CreateUnit, CreateCorpse = CreateCorpse}
    function Unit.new(player, id, x, y, face, is_dead)
      id = ID(id)
      local unit_obj = nil
      if (is_dead) then
        unit_obj = __replaced_functions.CreateCorpse(player:get(), id, x, y, face)
      else
        unit_obj = __replaced_functions.CreateUnit(player:get(), id, x, y, face)
      end
      local unit = {__id = id, __unit_obj = unit_obj}
      setmetatable(unit, Unit_meta)
      UnitDB.add(unit.__unit_obj, unit)
      unit:initCustomData()
      return unit
    end
    function Unit:destroy()
      self:destroyCustomData()
      UnitDB.rm(self.__unit_obj)
      RemoveUnit(self.__unit_obj)
      self.__unit_obj = nil
    end
    function Unit:getObj()
      return self.__unit_obj
    end
    function Unit:initCustomData()
      self.parameter = ParameterContainer.new(self)
    end
    function Unit:destroyCustomData()

    end
    function Unit:getId()
      return self.__id
    end
    function Unit:getName()
      return GetUnitName(self.__unit_obj)
    end
    function Unit:setVertexColor(red, green, blue, alpha)
      red = math.floor((255*to_range(red, 0, 1)))
      green = math.floor((255*to_range(green, 0, 1)))
      blue = math.floor((255*to_range(blue, 0, 1)))
      alpha = math.floor((255*to_range(alpha, 0, 1)))
      SetUnitVertexColor(self.__unit_obj, red, green, blue, alpha)
    end
    function Unit:getOwningPlayer()
      return GetOwningPlayer(self)
    end
    function Unit:setPos2(pos)
      self:setX(pos.x)
      self:setY(pos.y)
    end
    function Unit:setPos3(pos)
      self:setX(pos.x)
      self:setY(pos.y)
      self:setZ(pos.z)
    end
    function Unit:setX(x)
      SetUnitX(self.__unit_obj, x)
    end
    function Unit:setY(y)
      SetUnitY(self.__unit_obj, y)
    end
    function Unit:setZ(z)
      self:setFlyHeight((z-GetTerrainZ(self:getX(), self:getY())))
    end
    function Unit:getPos2()
      return Vec2.new(self:getX(), self:getY())
    end
    function Unit:getPos3()
      return Vec3.new(self:getX(), self:getY(), self:getZ())
    end
    function Unit:getX()
      return GetUnitX(self.__unit_obj)
    end
    function Unit:getY()
      return GetUnitY(self.__unit_obj)
    end
    function Unit:getZ()
      return (GetTerrainZ(self:getX(), self:getY())+self:getFlyHeight())
    end
    function Unit:getFlyHeight()
      return GetUnitFlyHeight(self.__unit_obj)
    end
    function Unit:setFlyHeigth(height)
      return SetUnitFlyHeight(self.__unit_obj, height)
    end
    function Unit:getDefaultsFlyHeight()
      return GetUnitDefaultFlyHeight(self.__unit_obj)
    end
    function Unit:setFacing(angle, time)
      if (time == nil or time <= 0) then
        SetUnitFacing(self.__unit_obj, angle)
      else
        SetUnitFacingTimed(self.__unit_obj, angle, time)
      end
    end
    function Unit:setFacingTo(target, time)
      local x, y = self:getPos()
      local angle = (180+((180/math.pi)*math.atan((y-target.y), (x-target.x))))
      self:setFacing(angle, time)
    end
    function Unit:getFacing()
      return GetUnitFacing(self.__unit_obj)
    end
    function Unit:getMoveSpeed()
      return GetUnitMoveSpeed(self.__unit_obj)
    end
    function Unit:setMoveSpeed(speed)
      SetUnitMoveSpeed(self.__unit_obj, speed)
    end
    function Unit:getTurnSpeed()
      return GetUnitTurnSpeed(self.__unit_obj)
    end
    function Unit:setTurnSpeed(speed)
      SetUnitTurnSpeed(self.__unit_obj, speed)
    end
    function Unit:getDefaultTurnSpeed()
      return GetUnitDefaultTurnSpeed(self.__unit_obj)
    end
    function Unit:addAbility(ability)
      UnitAddAbility(self.__unit_obj, ability:getId())
    end
    function Unit:removeAbility(ability)
      UnitRemoveAbility(self.__unit_obj, ability:getId())
    end
    function Unit:getAbilityLevel(ability)
      return GetUnitAbilityLevel(self.__unit_obj, ability:getId())
    end
    function Unit:setAbilityLevel(ability)
      SetUnitAbilityLevel(self.__unit_obj, ability:getId())
    end
    function Unit:changeAbilityField(ability, value, field, lvl)
      return AbilityField.set(ability, self, value, field, lvl)
    end
    function Unit:setInvulnerable(flag)
      SetUnitInvulnerable(self.__unit_obj, flag)
    end
    function Unit:applyTimedLife(time)
      UnitApplyTimedLife(self.__unit_obj, 0, time)
    end
    function Unit:issueImmediateOrderById(order_id)
      IssueImmediateOrderById(self.__unit_obj, order_id)
    end
    function Unit:orderStop()
      self:issueImmediateOrderById(851972)
    end
    function Unit:issuePointOrderById(order_id, x, y)
      IssuePointOrderById(self.__unit_obj, order_id, x, y)
    end
    function Unit:setMoveSpeed(speed)
      SetUnitMoveSpeed(self.__unit_obj, speed)
    end
    function Unit:setTurnSpeed(speed)
      SetUnitTurnSpeed(self.__unit_obj, speed)
    end
    function Unit:playAnimation(animation)
      SetUnitAnimation(self.__unit_obj, animation)
    end
    function Unit:setAnimationSpeed(scale)
      SetUnitTimeScale(self.__unit_obj, scale)
    end
    function Unit:pause()
      PauseUnit(self.__unit_obj, true)
    end
    function Unit:unpause()
      PauseUnit(self.__unit_obj, false)
    end
    function CreateUnit(player, id, x, y, face)
      return Unit.new(player, id, x, y, face, false)
    end
    function CreateCorpse(player, id, x, y, face)
      return Unit.new(player, id, x, y, face, true)
    end
    function GetLevelingUnit()
      return UnitDB.get(__replaced_functions.GetLevelingUnit())
    end
    function GetLearningUnit()
      return UnitDB.get(__replaced_functions.GetLearningUnit())
    end
    function GetRevivableUnit()
      return UnitDB.get(__replaced_functions.GetRevivableUnit())
    end
    function GetRevivingUnit()
      return UnitDB.get(__replaced_functions.GetRevivingUnit())
    end
    function GetAttacker()
      return UnitDB.get(__replaced_functions.GetAttacker())
    end
    function GetRescuer()
      return UnitDB.get(__replaced_functions.GetRescuer())
    end
    function GetDyingUnit()
      return UnitDB.get(__replaced_functions.GetDyingUnit())
    end
    function GetKillingUnit()
      return UnitDB.get(__replaced_functions.GetKillingUnit())
    end
    function GetDecayingUnit()
      return UnitDB.get(__replaced_functions.GetDecayingUnit())
    end
    function GetConstructingStructure()
      return UnitDB.get(__replaced_functions.GetConstructingStructure())
    end
    function GetCancelledStructure()
      return UnitDB.get(__replaced_functions.GetCancelledStructure())
    end
    function GetConstructedStructure()
      return UnitDB.get(__replaced_functions.GetConstructedStructure())
    end
    function GetResearchingUnit()
      return UnitDB.get(__replaced_functions.GetResearchingUnit())
    end
    function GetTrainedUnit()
      return UnitDB.get(__replaced_functions.GetTrainedUnit())
    end
    function GetDetectedUnit()
      return UnitDB.get(__replaced_functions.GetDetectedUnit())
    end
    function GetSummoningUnit()
      return UnitDB.get(__replaced_functions.GetSummoningUnit())
    end
    function GetSummonedUnit()
      return UnitDB.get(__replaced_functions.GetSummonedUnit())
    end
    function GetTransportUnit()
      return UnitDB.get(__replaced_functions.GetTransportUnit())
    end
    function GetLoadedUnit()
      return UnitDB.get(__replaced_functions.GetLoadedUnit())
    end
    function GetSellingUnit()
      return UnitDB.get(__replaced_functions.GetSellingUnit())
    end
    function GetSoldUnit()
      return UnitDB.get(__replaced_functions.GetSoldUnit())
    end
    function GetBuyingUnit()
      return UnitDB.get(__replaced_functions.GetBuyingUnit())
    end
    function GetChangingUnit()
      return UnitDB.get(__replaced_functions.GetChangingUnit())
    end
    function GetManipulatingUnit()
      return UnitDB.get(__replaced_functions.GetManipulatingUnit())
    end
    function GetOrderedUnit()
      return UnitDB.get(__replaced_functions.GetOrderedUnit())
    end
    function GetOrderTargetUnit()
      return UnitDB.get(__replaced_functions.GetOrderTargetUnit())
    end
    function GetSpellAbilityUnit()
      return UnitDB.get(__replaced_functions.GetSpellAbilityUnit())
    end
    function GetSpellTargetUnit()
      return UnitDB.get(__replaced_functions.GetSpellTargetUnit())
    end
    function GetTriggerUnit()
      return UnitDB.get(__replaced_functions.GetTriggerUnit())
    end
    function GetEventDamage()
      return UnitDB.get(__replaced_functions.GetEventDamage())
    end
    function GetEventDamageSource()
      return UnitDB.get(__replaced_functions.GetEventDamageSource())
    end
    function GetEventTargetUnit()
      return UnitDB.get(__replaced_functions.GetEventTargetUnit())
    end
    Debug("Unit class initialized")
    return Unit
end
__require_data.module["ability.warlord.compiletime"] = function()
    local WarlordCompiletime = {}
    function WarlordCompiletime.generateSummonSpearmanAbility(name, tooltip, range, area, cast_time, cooldown, hot_key)
      if (not WeObjEdit) then
        print("WeObjEdit module is not loaded.")
        return nil
      end
      local id = WeObjEdit.Utils.nextAbilId()
      local order = WeObjEdit.Utils.nextOrderId()
      local abil = WeObjEdit.Preset.Channel.new(id, order, 1, "point", true, true, false, false, false)
      abil:setTooltipNormal(name, 1)
      abil:setTooltipNormalExtended(tooltip, 1)
      abil:setCastRange(range, 1)
      abil:setAreaofEffect(area, 1)
      abil:setCastingTime(0, 1)
      abil:setFollowThroughTime(cast_time, 1)
      abil:setArtDuration(cast_time, 1)
      abil:setCooldown(cooldown, 1)
      abil:setHotkeyNormal(hot_key)
      return id
    end
    return WarlordCompiletime
end
__require_data.module["ability.warlord.settings"] = function()
    local WarlordSettings = {Ability1 = {HotKey = "X", Tooltip = "Summons invulnerale spirit warrior.", Cooldown = 0, TargetingArea = 150, CastingTime = 0, Name = "Summon spearman", Id = "AM#$", CastRange = 500}}
    return WarlordSettings
end
__require_data.module["player.playerDB"] = function()
    local PlayerDB = {}
    function PlayerDB.add(player_obj, player)
      PlayerDB[player_obj] = player
    end
    function PlayerDB.rm(player_obj)
      PlayerDB[player_obj] = nil
    end
    function PlayerDB.get(player_obj)
      return PlayerDB[player_obj]
    end
    return PlayerDB
end
__require_data.module["player.player"] = function()
    local PlayerDB = require("player.playerDB")
    local PlayerIndexDB = {}
    __replaced_class = {Player = Player}
    Player = {}
    local Player_meta = {__index = Player}
    setmetatable(Player, Player_meta)
    function Player_meta.__call(_, index)
      if (type(index) ~= "number") then
        return nil
      end
      return PlayerIndexDB[math.floor(index)]
    end
    function Player_meta.__tostring(self)
      return string.format("Player_%d", self:getIndex())
    end
    local function newPlayer(index)
      local player = {index = index, player_obj = __replaced_class.Player(index)}
      setmetatable(player, Player_meta)
      PlayerDB.add(player.player_obj, player)
      PlayerIndexDB[index] = player
      return player
    end
    local local_player = nil
    function Player.init()
      for i = 0, (bj_MAX_PLAYER_SLOTS-1) do
        newPlayer(i)
      end
      local_player = PlayerDB.get(GetLocalPlayer())
    end
    function Player.getLocal()
      return local_player
    end
    function Player:get()
      return self.player_obj
    end
    function Player:getIndex()
      return self.index
    end
    function Player:forceUIKey(key)
      if (self == local_player) then
        key = string.upper(key)
        ForceUIKey(key)
      end
    end
    local __replaced_functions = {GetOwningPlayer = GetOwningPlayer, GetLocalPlayer = GetLocalPlayer}
    function GetOwningPlayer(unit)
      local player_obj = __replaced_functions.GetOwningPlayer(unit.unit_obj)
      return PlayerDB.get(player_obj)
    end
    function GetLocalPlayer()
      return PlayerDB.get(__replaced_functions.GetLocalPlayer())
    end
    return Player
end
__require_data.module["utils.init"] = function()
    local Init = {}
    function Init.start()
      for name, _ in pairs(__require_data.module) do
        if (not __require_data.loaded[name]) then
          __require_data.result[name] = __require_data.module[name]()
          __require_data.loaded[name] = true
        end
        if (__require_data.result[name].init ~= nil) then
          Debug(name, "init...")
          __require_data.result[name].init()
        end
      end
      Debug("Initialisation finished")
    end
    return Init
end
__require_data.module["utils.timerAction"] = function()
    local TimerAction = {}
    local TimerAction_meta = {__index = TimerAction}
    function TimerAction.new(time, callback, data)
      local action = {time = time, callback = callback, data = data}
      setmetatable(action, TimerAction_meta)
      return action
    end
    function TimerAction:getTime()
      return self.time
    end
    function TimerAction:run()
      self.callback(self.data)
    end
    return TimerAction
end
__require_data.module["utils.globalTimer"] = function()
    local TimerAction = require("utils.timerAction")
    local GlobalTimer = {timer = nil, cur_time = 0, precision = 0.03125, actions = {}}
    function GlobalTimer.init()
      GlobalTimer.timer = CreateTimer()
      TimerStart(GlobalTimer.timer, GlobalTimer.precision, true, GlobalTimer.period)
    end
    function GlobalTimer.getPrecision()
      return GlobalTimer.precision
    end
    function GlobalTimer.period()
      local cur_time = (GlobalTimer.cur_time+GlobalTimer.precision)
      while(#GlobalTimer.actions ~= 0) do
        local action = table.remove(GlobalTimer.actions, 1)
        if (action:getTime() <= cur_time) then
          action:run()
          Debug("Run", action:getTime(), cur_time)
        else
          table.insert(GlobalTimer.actions, 1, action)
          Debug("Wait", action:getTime(), cur_time)
          break
        end
      end
      GlobalTimer.cur_time = cur_time
    end
    local function findPos(time, first, last, list)
      local len = ((last-first)+1)
      if (len <= 1) then
        return 1
      end
      local i, _ = math.modf((len/2))
      local pos = (first+i)
      if (list[pos]:getTime() > time) then
        return findPos(time, first, (pos-1), list)
      else
        return findPos(time, pos, last, list)
      end
    end
    local function findPosSimple(time)
      local count = #GlobalTimer.actions
      if (count == 0) then
        return 1
      end
      for i = 1, count do
        if (GlobalTimer.actions[i]:getTime() > time) then
          return i
        end
      end
      return (count+1)
    end
    function GlobalTimer.addAction(delay, callback, data)
      if (delay == 0) then
        delay = 0.01
      end
      local time = (GlobalTimer.cur_time+delay)
      local action = TimerAction.new(time, callback, data)
      local pos = findPosSimple(time)
      table.insert(GlobalTimer.actions, pos, action)
      return action
    end
    function GlobalTimer.removeAction(action)
      local count = #GlobalTimer.actions
      for i = 1, count do
        if (GlobalTimer.actions[i] == action) then
          table.remove(GlobalTimer.actions, i)
          return true
        end
      end
      return false
    end
    return GlobalTimer
end
__require_data.module["utils.math.vec3"] = function()
    Vec3 = {}
    local Vec3_meta = {__index = Vec3}
    function Vec3_meta.__tostring(self)
      return string.format("[%.2f, %.2f, %.2f]", self.x, self.y, self.z)
    end
    local loc = nil
    function Vec3.init()
      loc = Location(0, 0)
    end
    function GetTerrainZ(x, y)
      MoveLocation(loc, x, y)
      return GetLocationZ(loc)
    end
    function Vec3.new(x, y, z)
      local v = {x = x, y = y, z = z}
      setmetatable(v, Vec3_meta)
      return v
    end
    return Vec3
end
__require_data.module["utils.math.vec2"] = function()
    Vec2 = {}
    local Vec2_meta = {__index = Vec2}
    function Vec2_meta.__tostring(self)
      return string.format("[%.2f, %.2f]", self.x, self.y)
    end
    function Vec2.new(x, y)
      local v = {x = x, y = y}
      setmetatable(v, Vec2_meta)
      return v
    end
    return Vec2
end
__require_data.module["utils.settings"] = function()
    local Settings = {debug = true, UnitParameters = {attack_dispersion = 0.15, value_to_get_half_cap_for_percent_value = 500}}
    return Settings
end
__require_data.module["utils.utils"] = function()
    local Settings = require("utils.settings")
    require("utils.math.vec2")
    require("utils.math.vec3")
    require("utils.globalTimer")
    local Utils = {}
    function getErrorPos()
      local str = ""
      local i = 2
      while(debug.getinfo(i, "ln") ~= nil) do
        local func = debug.getinfo(i, "lnS")
        local source_type = func.source:sub((#func.source-3), #func.source)
        if (func.source:sub((#func.source-3), #func.source) == ".lua") then
          str = "  "..func.source..":"..tostring(func.currentline).."\n"..str
        end
        i = (i+1)
      end
      return str
    end
    local __real_print = print
    function print(...)
      if (is_compiletime == true) then
        __real_print(...)
      else
        local s = ""
        for i = 1, select("#", ...) do
          local v = select(i, ...)
          local t = type(v)
          if (t == "nil") then
            v = "nil"
          elseif (t == "userdata") then
            v = "userdata"
          elseif (t == "string") then
            v = v
          elseif (t == "integer" or t == "number" or t == "table" or t == "function") then
            v = tostring(v)
          else
            v = ""
          end



          s = s.." "..v
        end
        for i = 0, 23 do
          DisplayTimedTextToPlayer(Player(i), 0, 0, 30, s)
        end
      end
    end
    function Debug(...)
      if (is_compiletime) then
        __real_print(...)
      elseif (Settings.debug) then
        local s = ""
        for i = 1, select("#", ...) do
          local v = select(i, ...)
          local t = type(v)
          if (t == "nil") then
            v = "nil"
          elseif (t == "userdata") then
            v = "userdata"
          elseif (t == "string") then
            v = v
          elseif (t == "integer" or t == "number") then
            v = tostring(v)
          elseif (t == "table") then
            v = tostring(v)
          else
            v = ""
          end




          s = s.." "..v
        end
        DisplayTimedTextToPlayer(GetLocalPlayer(), 0, 0, 30, "[Debug]: "..s)
      end

    end
    function ID(id)
      if (type(id) == "string") then
        return string.unpack(">I4", id)
      elseif (type(id) == "number" and math.fmod(id, 1) == 0) then
        return id
      end

      print("Wrong id fromat")
      print(getErrorPos())
      return nil
    end
    function ID2str(id)
      return string.pack(">I4", id)
    end
    function player2index(player)
      for i = 0, (bj_MAX_PLAYER_SLOTS-1) do
        if (Player(i) == player) then
          return i
        end
      end
      return -1
    end
    function to_range(val, min, max)
      if (val < min) then
        return min
      end
      if (val > max) then
        return max
      end
      return val
    end
    return Utils
end
  
  GG_trg_Melee_Initialization = nil
  function InitGlobals()

  end
  function Trig_Melee_Initialization_Actions()

  end
  function InitTrig_Melee_Initialization()
    GG_trg_Melee_Initialization = CreateTrigger()
    TriggerAddAction(GG_trg_Melee_Initialization, Trig_Melee_Initialization_Actions)
  end
  function InitCustomTriggers()
    InitTrig_Melee_Initialization()
  end
  function RunInitialization()
    DestroyTimer(GetExpiredTimer())
    local Init = require("utils.init")
    local Utils = require("utils.utils")
    glTimer = require("utils.globalTimer")
    Init.start()
    local Player = require("player.player")
    require("ability.warlord.settings")
    local Unit = require("unit.unit")
    Debug(Player(0))
    local u = Unit.new(Player(0), "hfoo", 0, 0, 0)
    Debug(u)
  end
  function InitCustomPlayerSlots()
    SetPlayerStartLocation(Player(0), 0)
    SetPlayerColor(Player(0), ConvertPlayerColor(0))
    SetPlayerRacePreference(Player(0), RACE_PREF_HUMAN)
    SetPlayerRaceSelectable(Player(0), true)
    SetPlayerController(Player(0), MAP_CONTROL_USER)
  end
  function InitCustomTeams()
    SetPlayerTeam(Player(0), 0)
  end
  function main()
    SetCameraBounds((-3328.0+GetCameraMargin(CAMERA_MARGIN_LEFT)), (-3584.0+GetCameraMargin(CAMERA_MARGIN_BOTTOM)), (3328.0-GetCameraMargin(CAMERA_MARGIN_RIGHT)), (3072.0-GetCameraMargin(CAMERA_MARGIN_TOP)), (-3328.0+GetCameraMargin(CAMERA_MARGIN_LEFT)), (3072.0-GetCameraMargin(CAMERA_MARGIN_TOP)), (3328.0-GetCameraMargin(CAMERA_MARGIN_RIGHT)), (-3584.0+GetCameraMargin(CAMERA_MARGIN_BOTTOM)))
    SetDayNightModels("Environment\\DNC\\DNCLordaeron\\DNCLordaeronTerrain\\DNCLordaeronTerrain.mdl", "Environment\\DNC\\DNCLordaeron\\DNCLordaeronUnit\\DNCLordaeronUnit.mdl")
    NewSoundEnvironment("Default")
    SetAmbientDaySound("LordaeronSummerDay")
    SetAmbientNightSound("LordaeronSummerNight")
    SetMapMusic("Music", true, 0)
    InitBlizzard()
    InitGlobals()
    InitCustomTriggers()
    TimerStart(CreateTimer(), 0.1, false, RunInitialization)
  end
  function config()
    SetMapName("TRIGSTR_001")
    SetMapDescription("TRIGSTR_003")
    SetPlayers(1)
    SetTeams(1)
    SetGamePlacement(MAP_PLACEMENT_USE_MAP_SETTINGS)
    DefineStartLocation(0, 0, 0)
    InitCustomPlayerSlots()
    SetPlayerSlotAvailable(Player(0), MAP_CONTROL_USER)
    InitGenericPlayerSlots()
  end